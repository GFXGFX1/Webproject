import json
import logging
from channels.generic.websocket import AsyncWebsocketConsumer
from asgiref.sync import sync_to_async
from django.core.exceptions import ObjectDoesNotExist
from chatapp.models import Room, Message, User

logger = logging.getLogger(__name__)

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope['url_route']['kwargs']['room_slug']
        self.roomGroupName = f'chat_{self.room_name}'
        
        await self.channel_layer.group_add(
            self.roomGroupName,
            self.channel_name
        )
        await self.accept()
        
    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(
            self.roomGroupName,
            self.channel_name
        )
        
    async def receive(self, text_data):
        try:
            text_data_json = json.loads(text_data)
            message = text_data_json["message"]
            username = text_data_json["username"]
            room_name = text_data_json["room_name"]

            # Validate message content
            if not message or not username or not room_name:
                logger.warning("Invalid message data received.")
                return
            
            await self.save_message(message, username, room_name)     

            await self.channel_layer.group_send(
                self.roomGroupName, {
                    "type": "sendMessage",
                    "message": message,
                    "username": username,
                    "room_name": room_name,
                }
            )
        except json.JSONDecodeError:
            logger.error("Received invalid JSON.")
        except Exception as e:
            logger.error(f"Error processing message: {e}")

    async def sendMessage(self, event):
        message = event["message"]
        username = event["username"]
        await self.send(text_data=json.dumps({"message": message, "username": username}))
    
    @sync_to_async
    def save_message(self, message, username, room_name):
        try:
            user = User.objects.get(username=username)
            room = Room.objects.get(name=room_name)
            
            Message.objects.create(user=user, room=room, content=message)
        except ObjectDoesNotExist as e:
            logger.error(f"Error saving message: {e}")
